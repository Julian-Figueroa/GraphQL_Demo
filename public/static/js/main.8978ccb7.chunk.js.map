{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","components/Books.js","components/AuthorDetails.js","components/AuthorList.js","components/AddAuthor.js","components/Authors.js","components/Navbar.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","addAuthorMutation","_templateObject4","getBookQuery","_templateObject5","getAuthorQuery","_templateObject6","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBook","components_BookDetails","AddBook","authorId","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","Books","react","components_BookList","components_AddBook","AuthorDetails","age","displayAuthorDetails","AuthorList","displayAuthor","components_AuthorDetails","AddAuthor","parseInt","Authors","components_AuthorList","components_AddAuthor","Navbar","_ref","icon","title","react_router_dom","to","defaultProps","client","ApolloClient","uri","App","react_apollo_esm","components_Navbar","react_router","path","exact","component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.8978ccb7.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\nconst getBooksQuery = gql`\n  {\n    books {\n      name\n      id\n    }\n  }\n`;\n\nconst getAuthorsQuery = gql`\n  {\n    authors {\n      name\n      id\n    }\n  }\n`;\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre: String!, $authorId: ID!) {\n    addBook(name: $name, genre: $genre, authorId: $authorId) {\n      name\n      id\n    }\n  }\n`;\n\nconst addAuthorMutation = gql`\n  mutation($name: String!, $age: Int!) {\n    addAuthor(name: $name, age: $age) {\n      name\n      id\n    }\n  }\n`;\n\nconst getBookQuery = gql`\n  query($id: ID) {\n    book(id: $id) {\n      id\n      name\n      genre\n      author {\n        id\n        name\n        age\n        books {\n          name\n          id\n        }\n      }\n    }\n  }\n`;\n\nconst getAuthorQuery = gql`\n  query($id: ID) {\n    author(id: $id) {\n      id\n      name\n      age\n      books {\n        name\n        id\n      }\n    }\n  }\n`;\n\nexport {\n  getBooksQuery,\n  getAuthorsQuery,\n  addBookMutation,\n  addAuthorMutation,\n  getBookQuery,\n  getAuthorQuery\n};\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { getBookQuery } from '../queries/queries';\n\nclass BookDetails extends Component {\n  //console.log('Props: ', this.props);\n  displayBookDetails() {\n    const { book } = this.props.data;\n    if (book) {\n      return (\n        <div>\n          <h2>{book.name}</h2>\n          <p>{book.genre}</p>\n          <p>{book.author.name}</p>\n          <p>All Books by this Author:</p>\n          <ul className=\"other-books\">\n            {book.author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No book selected ...</div>;\n    }\n  }\n  render() {\n    return (\n      <div id=\"book-details\">\n        {this.displayBookDetails()}\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.bookId\n      }\n    };\n  }\n})(BookDetails);\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { getBooksQuery } from '../queries/queries';\nimport BookDetails from './BookDetails';\n\nclass BookList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null\n    };\n  }\n  displayBook() {\n    let data = this.props.data;\n\n    if (data.loading) {\n      return <div>Loading Books ...</div>;\n    } else {\n      return data.books.map(book => {\n        return (\n          <li\n            key={book.id}\n            onClick={e => {\n              this.setState({\n                selected: book.id\n              });\n            }}\n          >\n            {' '}\n            {book.name}\n          </li>\n        );\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <ul id=\"book-list\">{this.displayBook()}</ul>\n        <BookDetails bookId={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);\n","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\n\nimport {\n  getAuthorsQuery,\n  addBookMutation,\n  getBooksQuery\n} from '../queries/queries';\n\nclass AddBook extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      genre: '',\n      authorId: ''\n    };\n  }\n  displayAuthors() {\n    let data = this.props.getAuthorsQuery;\n    //console.log('Props: ', this.props);\n\n    if (data.loading) {\n      return <option>Loading Authors ...</option>;\n    } else {\n      return data.authors.map(author => {\n        return (\n          <option key={author.id} value={author.id}>\n            {' '}\n            {author.name}\n          </option>\n        );\n      });\n    }\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    //console.log('Event State', this.state);\n\n    this.props.addBookMutation({\n      variables: {\n        name: this.state.name,\n        genre: this.state.genre,\n        authorId: this.state.authorId\n      },\n      refetchQueries: [{ query: getBooksQuery }]\n    });\n  }\n\n  render() {\n    return (\n      <form id='add-book' onSubmit={this.submitForm.bind(this)}>\n        <div className='field'>\n          <label>Book Name:</label>\n          <input\n            type='text'\n            onChange={e =>\n              this.setState({\n                name: e.target.value\n              })\n            }\n          />\n        </div>\n        <div className='field'>\n          <label>Genre:</label>\n          <input\n            type='text'\n            onChange={e =>\n              this.setState({\n                genre: e.target.value\n              })\n            }\n          />\n        </div>\n        <div className='field'>\n          <label>Author:</label>\n          <select\n            onChange={e =>\n              this.setState({\n                authorId: e.target.value\n              })\n            }\n          >\n            <option>Select author</option>\n            {this.displayAuthors()}\n          </select>\n        </div>\n\n        <button className='btn-sm'>+</button>\n      </form>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getAuthorsQuery, {\n    name: 'getAuthorsQuery'\n  }),\n  graphql(addBookMutation, {\n    name: 'addBookMutation'\n  })\n)(AddBook);\n","import React, { Fragment } from 'react';\nimport BookList from './BookList';\nimport AddBook from './AddBook';\n\nconst Books = () => (\n  <Fragment>\n    <BookList />\n    <AddBook />\n  </Fragment>\n);\n\nexport default Books;\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { getAuthorQuery } from '../queries/queries';\n\nclass AuthorDetails extends Component {\n  //console.log('Props: ', this.props);\n  displayAuthorDetails() {\n    const { author } = this.props.data;\n    if (author) {\n      return (\n        <div>\n          <h2>{author.name}</h2>\n          <p>{author.age}</p>\n          <p>All Books by this Author:</p>\n          <ul className='other-books'>\n            {author.books.map(item => {\n              return <li key={item.id}>{item.name}</li>;\n            })}\n          </ul>\n        </div>\n      );\n    } else {\n      return <div>No author selected ...</div>;\n    }\n  }\n  render() {\n    return <div id='book-details'>{this.displayAuthorDetails()}</div>;\n  }\n}\n\nexport default graphql(getAuthorQuery, {\n  options: props => {\n    return {\n      variables: {\n        id: props.authorId\n      }\n    };\n  }\n})(AuthorDetails);\n","import React, { Component } from 'react';\nimport { graphql } from 'react-apollo';\n\nimport { getAuthorsQuery } from '../queries/queries';\nimport AuthorDetails from './AuthorDetails';\n\nclass AuthorList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null\n    };\n  }\n  displayAuthor() {\n    let data = this.props.data;\n\n    if (data.loading) {\n      return <div>Loading Authors ...</div>;\n    } else {\n      return data.authors.map(author => {\n        return (\n          <li\n            key={author.id}\n            onClick={e => {\n              this.setState({\n                selected: author.id\n              });\n            }}\n          >\n            {' '}\n            {author.name}\n          </li>\n        );\n      });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <ul id='author-list'>{this.displayAuthor()}</ul>\n        <AuthorDetails authorId={this.state.selected} />\n      </div>\n    );\n  }\n}\n\nexport default graphql(getAuthorsQuery)(AuthorList);\n","import React, { Component } from 'react';\nimport { graphql, compose } from 'react-apollo';\n\nimport { getAuthorsQuery, addAuthorMutation } from '../queries/queries';\n\nclass AddAuthor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      genre: ''\n    };\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    //console.log('Event State', this.state);\n\n    this.props.addAuthorMutation({\n      variables: {\n        name: this.state.name,\n        age: parseInt(this.state.age)\n      },\n      refetchQueries: [{ query: getAuthorsQuery }]\n    });\n  }\n\n  render() {\n    return (\n      <form id='add-author' onSubmit={this.submitForm.bind(this)}>\n        <div className='field'>\n          <label>Author Name:</label>\n          <input\n            type='text'\n            onChange={e =>\n              this.setState({\n                name: e.target.value\n              })\n            }\n          />\n        </div>\n        <div className='field'>\n          <label>Age:</label>\n          <input\n            type='text'\n            onChange={e =>\n              this.setState({\n                age: e.target.value\n              })\n            }\n          />\n        </div>\n\n        <button className='btn-sm'>+</button>\n      </form>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getAuthorsQuery, {\n    name: 'getAuthorsQuery'\n  }),\n  graphql(addAuthorMutation, {\n    name: 'addAuthorMutation'\n  })\n)(AddAuthor);\n","import React, { Fragment } from 'react';\nimport AuthorList from './AuthorList';\nimport AddAuthor from './AddAuthor';\n\nconst Authors = () => (\n  <Fragment>\n    <AuthorList />\n    <AddAuthor />\n  </Fragment>\n);\n\nexport default Authors;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = ({ icon, title }) => {\n  return (\n    <nav className='navbar bg-primary'>\n      <ul>\n        <li>\n          <i className={icon} /> {title}\n        </li>\n        <li>\n          <Link to='/'>Books</Link>\n        </li>\n        <li>\n          <Link to='/authors'>Authors</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\nNavbar.defaultProps = {\n  title: 'List of Books',\n  icon: 'fab fa-facebook'\n};\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\n//components\nimport Books from './components/Books';\nimport Authors from './components/Authors';\nimport Navbar from './components/Navbar';\n\n//Apollo Client Setup\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className='App' id='main'>\n            <Navbar />\n            <div className='container'>\n              <Switch>\n                <Route path='/' exact component={Books} />\n                <Route path='/authors' exact component={Authors} />\n              </Switch>\n            </div>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}